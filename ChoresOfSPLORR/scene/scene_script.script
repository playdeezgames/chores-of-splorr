local grimoire = require("game.grimoire")
local initializer = require("world.initializer")
local room = require("world.room")
local terrain = require("world.terrain")
local avatar = require("world.avatar")
local character = require("world.character")
local character_type = require("world.character_type")
local actions = require("game.actions")
local item = require("world.item")
local item_type = require("world.item_type")
local feature   = require("world.feature")
local feature_type = require("world.feature_type")

local TILEMAP_URL = "/scene#scene"
local INVENTORY_URL = "/scene#inventory"
local TERRAIN_LAYER = "Terrain"
local CHARACTER_LAYER = "Character"
local ITEM_LAYER = "Item"
local FEATURE_LAYER = "Feature"

local shifted = false

function init(self)
	msg.post(".", "acquire_input_focus")
	initializer.initialize()
end

function final(self)
end

local function update_scene()
	local avatar_character_id = avatar.get_character()
	local room_id = character.get_room(avatar_character_id)
	for column= 1, grimoire.BOARD_COLUMNS do
		for row = 1, grimoire.BOARD_ROWS do
			local terrain_id = room.get_terrain(room_id, column, row)
			local tile = terrain.get_tile(terrain_id)
			tilemap.set_tile(TILEMAP_URL, TERRAIN_LAYER, column, row, tile)

			local character_id = room.get_character(room_id, column, row)
			tile = 0
			if character_id ~= nil then
				local character_type_id = character.get_character_type(character_id)
				tile = character_type.get_tile(character_type_id)
			end
			tilemap.set_tile(TILEMAP_URL, CHARACTER_LAYER, column, row, tile)

			local feature_id = room.get_feature(room_id, column, row)
			tile = 0
			if feature_id ~= nil then
				local feature_type_id = feature.get_feature_type(feature_id)
				tile = feature_type.get_tile(feature_type_id)
			end
			tilemap.set_tile(TILEMAP_URL, FEATURE_LAYER, column, row, tile)

			local item_id = room.get_item(room_id, column, row)
			tile = 0
			if item_id ~= nil then
				local item_type_id = item.get_item_type(item_id)
				tile = item_type.get_tile(item_type_id)
			end
			tilemap.set_tile(TILEMAP_URL, ITEM_LAYER, column, row, tile)
		end
	end
end

local function update_inventory()
	local avatar_character_id = avatar.get_character()
	for column = 1, grimoire.INVENTORY_COLUMNS do
		for row = 1, grimoire.INVENTORY_ROWS do
			local index = column + (row - 1) * grimoire.INVENTORY_COLUMNS
			local item_id = character.get_inventory(avatar_character_id, index)
			local tile = 0
			if item_id ~= nil then
				local item_type_id = item.get_item_type(item_id)
				tile = item_type.get_tile(item_type_id)
			end
			tilemap.set_tile(INVENTORY_URL, ITEM_LAYER, column, row, tile)
		end
	end
end

function update(self, dt)
	update_scene()
	update_inventory()
end

function on_message(self, message_id, message, sender)
end

function on_input(self, action_id, action)
	if action_id == hash(actions.UP) and (action.pressed or action.repeated) then
		avatar.move_up(shifted)
	elseif action_id == hash(actions.RIGHT) and (action.pressed or action.repeated) then
		avatar.move_right(shifted)
	elseif action_id == hash(actions.DOWN) and (action.pressed or action.repeated) then
		avatar.move_down(shifted)
	elseif action_id == hash(actions.LEFT) and (action.pressed or action.repeated) then
		avatar.move_left(shifted)
	elseif action_id == hash(actions.SHIFT) then
		if action.pressed then
			shifted = true
		elseif action.released then
			shifted = false
		end
	end
end
